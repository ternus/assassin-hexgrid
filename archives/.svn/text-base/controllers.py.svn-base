import turbogears
from turbogears import controllers, expose, flash
from model import *
from turbogears import identity, redirect
from cherrypy import request, response
from docutils.core import publish_parts
import re
from sqlobject import SQLObjectNotFound

from archives import json
# import logging
# log = logging.getLogger("archives.controllers")

# othertomes = some way to detect other tomes
# perhaps regexping for the string "Exalted Foo Tome"
othertomes = re.compile(r"\b(Exalted(?!.*Exalted).+Tome)", re.I)
rmatch = re.compile(r"^(..)..$")
cmatch = re.compile(r"^..(..)$")

class Neighbors():
    north = False;
    northeast = False;
    northwest = False;
    south = False;
    southeast = False;
    southwest = False;

class Root(controllers.RootController):
    @expose(template="archives.templates.tome")
    # @identity.require(identity.in_group("admin"))
    @identity.require(identity.not_anonymous())
    def index(self, title="Start"):
        root = str(turbogears.url('/'))
        hexjump = 0
        # First, find the page.
        try:
            tome = Tome.byTitle(title)
        except SQLObjectNotFound:
            try:
                tome = Tome.byHex(title)
                hexjump = 1
            except SQLObjectNotFound:
                raise turbogears.redirect("notfound", title = title)

        title = tome.title

        # Grab our character.
        char = Character.byName(turbogears.identity.current.user.character)

        # Next, make sure that the character has the Inspiration to go to this page.
        if (title != "Start"): #everyone can tag the start page
            if (Root.wardedp(self, title) == "warded"):
                flash("You haven't satisfied the requirements to go to that page!")
                raise turbogears.redirect('/')
            if (Root.visitedp(self, title) == "not visited"):
                if (hexjump == 1):
                    flash("You haven't visited that page normally yet!")
                    raise turbogears.redirect('/')
                if (char.inspiration > 0):
                    char.inspiration = char.inspiration - 1
                    browsing = Browsing(character=char.name,
                                        title=tome.title)
                    # for FF:YS only
                    if (title == "Experimental Method"):
                        char.inspiration = char.inspiration + 3
                else:
                    flash("You need more inspiration to go to this page!")
                    raise turbogears.redirect('/')

        html_text = publish_parts(tome.text, writer_name="html")['html_body']
        html_text = othertomes.sub(r'<a href="%s\1">\1</a>' % root, html_text, 99)

        neighbors = Neighbors()
        row = str(rmatch.match(tome.hex).group(1))
        col = str(cmatch.match(tome.hex).group(1))        

        targethex = str(int(row)-1)+str(int(col)+1)
        neighbors.north = Root.neighborstat(self, targethex, root)
        targethex = str(row)+str(int(col)+1)
        neighbors.northeast = Root.neighborstat(self, targethex, root)
        targethex = str(int(row)+1)+str(int(col))
        neighbors.southeast = Root.neighborstat(self, targethex, root)
        targethex = str(int(row)+1)+str(int(col)-1)
        neighbors.south = Root.neighborstat(self, targethex, root)
        targethex = str(row)+str(int(col)-1)
        neighbors.southwest = Root.neighborstat(self, targethex, root)
        targethex = str(int(row)-1)+str(int(col))
        neighbors.northwest = Root.neighborstat(self, targethex, root)

        neighborwad = ""
        if (neighbors.north != "No neighboring tome"):
            neighborwad = neighborwad + "<li> North: " + neighbors.north + "</li>"
        if (neighbors.northeast != "No neighboring tome"):
            neighborwad = neighborwad + "<li> Northeast: " + neighbors.northeast + "</li>"
        if (neighbors.southeast != "No neighboring tome"):
            neighborwad = neighborwad + "<li> Southeast: " + neighbors.southeast + "</li>"
        if (neighbors.south != "No neighboring tome"):
            neighborwad = neighborwad + "<li> South: " + neighbors.south + "</li>"
        if (neighbors.southwest != "No neighboring tome"):
            neighborwad = neighborwad + "<li> Southwest: " + neighbors.southwest + "</li>"
        if (neighbors.northwest != "No neighboring tome"):
            neighborwad = neighborwad + "<li> Northwest: " + neighbors.northwest + "</li>"
        if (neighborwad == ""):
            neighborwad = "No neighboring tomes!"
            
       
        try:
            debug1 = Root.wardedp(self, title)
        except IndexError:
            debug1 = "foo"
        try:
            debug2 = tome.lockWards[1].key
        except IndexError:
            debug2 = "bar"

        cardcatalogs = ""
        if (Root.cardcatalogp(self, title) == "approved"):
            cardcatalogs = "You can grant other people access to this page. To do so, click <a href=\"" + root + "librarian?title=" + title + "\">here.</a>"
            if (Root.shortcutp(self, char.name, title) == "does not exist"):
                shortcut = Shortcut(name=char.name, title=title)                

        shortcuts = Root.shortcuts(self)


        return dict(text=html_text, tome=tome, character=char, root=root, neighbors = neighbors, debug1 = debug1, debug2 = debug2, shortcuts = shortcuts, cardcatalogs = cardcatalogs, neighborwad = neighborwad)

    @expose(template="archives.templates.login")
    def login(self, forward_url=None, previous_url=None, *args, **kw):

        if not identity.current.anonymous \
            and identity.was_login_attempted() \
            and not identity.get_identity_errors():
            raise redirect(forward_url)

        forward_url=None
        previous_url= request.path

        if identity.was_login_attempted():
            msg=_("The credentials you supplied were not correct or "
                   "did not grant access to this resource.")
        elif identity.get_identity_errors():
            msg=_("You must provide your credentials before accessing "
                   "this resource.")
        else:
            msg=_("Please log in.")
            forward_url= request.headers.get("Referer", "/")
            
        response.status=403
        return dict(message=msg, previous_url=previous_url, logging_in=True,
                    original_parameters=request.params,
                    forward_url=forward_url)

    @expose()
    def notfound(self, title):
        flash("The tome %s was not found." % title)
        raise turbogears.redirect("/")

#    @expose()
    def neighborstat(self, hex, root):
        foo = ""
        try:
            foo = Tome.byHex(hex).title
            n = "<a href=\"" + root + foo + "\">" + foo + "</a>"
            result = Ward.select(Ward.q.tome == Tome.byHex(hex).id)
            for item in result:
                    n += "<ul> <li>  Requires: " + item.key + "</li> </ul>"
        except SQLObjectNotFound:
            foo = "No neighboring tome"
            n = foo
        return n;

    @identity.require(identity.not_anonymous())
    def wardedp(self, title):
        baz = 0
        foo = Tome.byTitle(title)
        result = Ward.select(Ward.q.tome == foo.id)
        for item in result:
            if (Root.visitedp(self, item.key) == "not visited"):
                baz = 1
        if (baz == 1):
            return "warded"
        else:
            return "not warded"
        
    @expose()
    @identity.require(identity.not_anonymous())
    def visitedp(self, title):
        baz = 0
        result = Browsing.select(Browsing.q.title == title)
        for item in result:
            if (turbogears.identity.current.user.character == item.character):
                baz = 2        
        if (baz == 2):
            return "visited"
        else:
            return "not visited"

    def cardcatalogp(self, title):
        char = Character.byName(turbogears.identity.current.user.character)
	print str(char) + " " + title
        baz = 0
        result = CardCatalog.select(CardCatalog.q.title == title)
        for item in result:
            if (turbogears.identity.current.user.character == item.name):
                baz = 2
        if (baz == 2):
	    print "approved"
            return "approved"
        else:
            print "not approved"
            return "not approved"

    def shortcuts(self):
        retval = "<a href=\"" + turbogears.url("/") + "\">Start Page</a><br/>"
        result = Shortcut.select(Shortcut.q.name == turbogears.identity.current.user.character)
        for item in result:
            retval = retval + "<a href=\"" + turbogears.url("/%s" % item.title) + "\">" + item.title + "</a><br/>"
        return retval


    def shortcutp(self, name, title):
        baz = 0
        result = Shortcut.select(Shortcut.q.title == title)
        for item in result:
            if (name == item.name):
                # baz = 2 means we have a shortcut for this node
                baz = 2
        if (baz == 2):
            return "exists"
        else:
            return "does not exist"

#    def shortcutp(self, name, title):
#        baz = 0
#        qux = 1
#        while (baz == 0):
#            try:
#                n = Shortcut.get(qux).name
#                if (Shortcut.get(qux).title == title):
#                    if (name == n):
#                        # baz = 2 means we have a shortcut for this node
#                        baz = 2
#                qux = qux + 1
#            except SQLObjectNotFound:
#                # baz = 1 means we don't have a shortcut for this node
#                baz = 1
#        
#        if (baz == 2):
#            return "exists"
#        else:
#            return "does not exist"


    @expose(template="archives.templates.librarian")
    @identity.require(identity.not_anonymous())
    def librarian(self, title):
        

        return dict(title=title)
    
    @expose()
    @identity.require(identity.not_anonymous())
    def shortcut(self, targetname, targettome, submit):

        char = Character.byName(turbogears.identity.current.user.character)        
        try:
            targetchar = Character.byName(targetname)
        except SQLObjectNotFound:
            flash("We couldn't find the character %s!" % targetname)
            raise turbogears.redirect("/librarian?title=%s" % targettome)
        
        try:
            tome = Tome.byTitle(targettome)
        except SQLObjectNotFound:
            flash("We couldn't find the tome %s! How did you get this message?" % targettome)
            raise turbogears.redirect("/")

        if (Root.cardcatalogp(self, targettome) != "approved"):
            flash("You don't have access to grant other people access to %s!" % targettome)
            raise turbogears.redirect("/")

        if (Root.shortcutp(self, targetname, targettome) == "exists"):
            n = targetname + " already has access to " + targettome + "!"
            flash(n)
            raise turbogears.redirect("/")

        # OK, now we can make the damned shortcut
#        if (char.inspiration > 0):
#        char.inspiration = char.inspiration - 1
        shortcut = Shortcut(name=targetname, title=targettome)
        #else:
        #    n = "You need more inspiration to grant " + char + " access to " + targettome + "!"
        #    flash(n)
        #    raise turbogears.redirect('/')
        
        flash("Access granted!")
        raise turbogears.redirect("/")

    @expose()
    def logout(self):
        identity.current.logout()
        raise redirect("/")

    @expose()
    def default(self, title):
        return self.index(title)

    @expose(template="archives.templates.spend")
    @identity.require(identity.not_anonymous())
    def spend(self):
        
        char = Character.byName(turbogears.identity.current.user.character)
        return dict(char=char)

    @expose()
    @identity.require(identity.not_anonymous())
    def spendcommit(self, research, submit):
        char = Character.byName(turbogears.identity.current.user.character)
        char.research = int(research)
        char.inspiration = char.inspiration + char.research
        turbogears.flash("Traded 1 raw inspiration for %d research inspiration!" % char.research)
        raise turbogears.redirect("/")
